{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnePiece__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnePiece__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnePiece__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasureState",
          "type": "uint256"
        }
      ],
      "name": "OnePiece__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "finder",
          "type": "address"
        }
      ],
      "name": "FinderPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "OnePieceRaceEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedOnePieceFinder",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterOnePieceRace",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentFinder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasureState",
      "outputs": [
        {
          "internalType": "enum OnePiece.TreasureState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c720156418519dd0fba0f95ec31107634c83f8840171b6cd9fa78a8481a99d8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1225716",
    "logsBloom": "0x
    "blockHash": "0xa930606a75c464c5aa6f306789e5a6be6f1ea00a5e25516a6cba2686887d2071",
    "transactionHash": "0x6c720156418519dd0fba0f95ec31107634c83f8840171b6cd9fa78a8481a99d8",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1225716",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "100000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    1,
    "500000",
    "20"
  ],
  "numDeployments": 1,
  "solcInputHash": "36b043554111e1cf6ceba2d039de1c20",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnePiece__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnePiece__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnePiece__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasureState\",\"type\":\"uint256\"}],\"name\":\"OnePiece__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"finder\",\"type\":\"address\"}],\"name\":\"FinderPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"OnePieceRaceEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedOnePieceFinder\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterOnePieceRace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentFinder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasureState\",\"outputs\":[{\"internalType\":\"enum OnePiece.TreasureState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnePiece.sol\":\"OnePiece\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/OnePiece.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror OnePiece__UpkeepNotNeeded(uint256 currentBalance, uint256 playerNum, uint256 treasureState);\\r\\nerror OnePiece__NotEnoughETHEntered();\\r\\nerror OnePiece__TransferFailed();\\r\\nerror OnePiece__NotOpen();\\r\\n\\r\\ncontract OnePiece is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n\\r\\n    // Type Declarations\\r\\n    enum TreasureState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    //state variables\\r\\n    address payable[] private s_players;\\r\\n    address private s_recentFinder;\\r\\n    TreasureState private s_treasureState;\\r\\n    uint256 private s_lastTimeStamp;    \\r\\n\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint256 private immutable i_entranceFee;    \\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint256 private i_interval;\\r\\n\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint16 private constant NUM_WORDS = 1;\\r\\n\\r\\n    event OnePieceRaceEnter(address indexed player);\\r\\n    event RequestedOnePieceFinder(uint256 indexed requestId);\\r\\n    event FinderPicked(address indexed finder);\\r\\n\\r\\n    constructor(\\r\\n         address vrfCoordinatorV2,\\r\\n         uint256 entranceFee,\\r\\n         bytes32 gasLane,\\r\\n         uint64 subscriptionId,\\r\\n         uint32 callbackGasLimit,\\r\\n         uint256 interval\\r\\n        ) VRFConsumerBaseV2(vrfCoordinatorV2){ \\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_interval = interval;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_treasureState = TreasureState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;        \\r\\n    }\\r\\n\\r\\n    function enterOnePieceRace() public payable {\\r\\n        if(msg.value < i_entranceFee){\\r\\n            revert OnePiece__NotEnoughETHEntered();\\r\\n        }\\r\\n        if(s_treasureState != TreasureState.OPEN){\\r\\n            revert OnePiece__NotOpen();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n\\r\\n        // Emit an event when we update a dynamic array or mapping\\r\\n        emit OnePieceRaceEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    // This is the function that the Chainlink Keeper nodes call\\r\\n    // They look for the `upkeepNeeded` to return true. \\r\\n\\r\\n    function checkUpkeep(bytes memory /*checkData*/)public override\\r\\n    returns (bool upkeepNeeded, bytes memory /* performData */ ) {\\r\\n        bool isOpen = (TreasureState.OPEN == s_treasureState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval); \\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = (address(this).balance > 0);\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n        \\r\\n     }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override{\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if(!upkeepNeeded){\\r\\n            revert OnePiece__UpkeepNotNeeded(\\r\\n                address(this).balance, \\r\\n                s_players.length, \\r\\n                uint256(s_treasureState)\\r\\n            );\\r\\n        }\\r\\n        s_treasureState = TreasureState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedOnePieceFinder(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\r\\n        uint256 finderIndex = randomWords[0] % s_players.length;\\r\\n        address payable recentFinder = s_players[finderIndex];        \\r\\n        s_recentFinder = recentFinder;\\r\\n\\r\\n        s_treasureState = TreasureState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n\\r\\n       (bool callSuccess, ) = recentFinder.call{value: address(this).balance}(\\\"\\\");\\r\\n        //require(callSuccess, \\\"Call Failed\\\");\\r\\n        if(!callSuccess){\\r\\n            revert OnePiece__TransferFailed();\\r\\n        }        \\r\\n        emit FinderPicked(recentFinder);\\r\\n    }    \\r\\n\\r\\n    // View functions\\r\\n    function getEntranceFee () public view returns (uint256){\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address){\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentFinder() public view returns(address){\\r\\n        return s_recentFinder;\\r\\n    }\\r\\n\\r\\n    function getTreasureState() public view returns (TreasureState){\\r\\n        return s_treasureState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256){\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumOfPlayers() public view returns (uint256){\\r\\n        return s_players.length;\\r\\n    }\\r\\n    \\r\\n    function getLatestTimeStamp() public view returns (uint256){\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256){\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns(uint256){\\r\\n        return i_interval;\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x08cab9d9bff3c298e1e29f5509d2ab70ebd5ba7429a7eb9464e4be666b9721ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620017eb380380620017eb833981810160405281019062000038919062000292565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460c081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360e08181525050806003819055508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200011457620001136200032e565b5b0217905550426002819055505050505050506200035d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015e8262000131565b9050919050565b620001708162000151565b81146200017c57600080fd5b50565b600081519050620001908162000165565b92915050565b6000819050919050565b620001ab8162000196565b8114620001b757600080fd5b50565b600081519050620001cb81620001a0565b92915050565b6000819050919050565b620001e681620001d1565b8114620001f257600080fd5b50565b6000815190506200020681620001db565b92915050565b600067ffffffffffffffff82169050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600063ffffffff82169050919050565b6200026c8162000251565b81146200027857600080fd5b50565b6000815190506200028c8162000261565b92915050565b60008060008060008060c08789031215620002b257620002b16200012c565b5b6000620002c289828a016200017f565b9650506020620002d589828a01620001ba565b9550506040620002e889828a01620001f5565b9450506060620002fb89828a016200023a565b93505060806200030e89828a016200027b565b92505060a06200032189828a01620001ba565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051611430620003bb600039600061054901526000610526015260006105050152600081816102fa01526106da015260006104c901526000818161034a015261039e01526114306000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636e04ff0d116100595780636e04ff0d1461024657806391ad27b414610284578063c5dc8270146102af578063e55ae4e8146102b9576100c2565b806353a2c19a146101c5578063565429de146101f05780635f1b0fd81461021b576100c2565b806309bc33a7146100c75780631b2d09a4146100f25780631fe543e31461011d578063320229eb146101465780634585e33b1461017157806347abf36e1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610b7f565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610bdb565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610d8f565b610348565b005b34801561015257600080fd5b5061015b610408565b6040516101689190610b7f565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190610e46565b610412565b005b3480156101a657600080fd5b506101af610602565b6040516101bc9190610f0a565b60405180910390f35b3480156101d157600080fd5b506101da610619565b6040516101e79190610b7f565b60405180910390f35b3480156101fc57600080fd5b50610205610626565b6040516102129190610b7f565b60405180910390f35b34801561022757600080fd5b50610230610632565b60405161023d9190610b7f565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190610fda565b61063f565b60405161027b9291906110bd565b60405180910390f35b34801561029057600080fd5b506102996106ce565b6040516102a69190610b7f565b60405180910390f35b6102b76106d8565b005b3480156102c557600080fd5b506102e060048036038101906102db91906110ed565b610847565b6040516102ed9190610bdb565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fa57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103f192919061111a565b60405180910390fd5b610404828261088e565b5050565b6000600254905090565b600061042c6040518060200160405280600081525061063f565b5090508061049b5747600080549050600160149054906101000a900460ff16600181111561045d5761045c610e93565b5b6040517f4c06e75d00000000000000000000000000000000000000000000000000000000815260040161049293929190611143565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104c0576104bf610e93565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161058a95949392919061122d565b6020604051808303816000875af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190611295565b9050807f13c999cc31ad26382e6a0b214d56e3833b0e73178742900d614c0d3d2c0ae5af60405160405180910390a250505050565b6000600160149054906101000a900460ff16905090565b6000600161ffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561066757610666610e93565b5b6000600181111561067b5761067a610e93565b5b14905060006003546002544261069191906112f1565b119050600080600080549050119050600080471190508380156106b15750825b80156106ba5750815b80156106c35750805b955050505050915091565b6000600354905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610732576040517ff71c599900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561074657610745610e93565b5b600160149054906101000a900460ff16600181111561076857610767610e93565b5b1461079f576040517f088a2d6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f36e1748782a693d7561cc0e353c7fa9a602d4a80be3ab985c68292af133b3da860405160405180910390a2565b600080828154811061085c5761085b611325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108a9576108a8611325565b5b60200260200101516108bb9190611383565b905060008082815481106108d2576108d1611325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561096657610965610e93565b5b0217905550600067ffffffffffffffff81111561098657610985610c4c565b5b6040519080825280602002602001820160405280156109b45781602001602082028036833780820191505090505b50600090805190602001906109ca929190610abf565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109f8906113e5565b60006040518083038185875af1925050503d8060008114610a35576040519150601f19603f3d011682016040523d82523d6000602084013e610a3a565b606091505b5050905080610a75576040517fb99c7bfb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5c34b873ce06e2ccd7e487583d359907393624942ab5c5fa65ba5bf9f9c55fcb60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b38579160200282015b82811115610b375782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610adf565b5b509050610b459190610b49565b5090565b5b80821115610b62576000816000905550600101610b4a565b5090565b6000819050919050565b610b7981610b66565b82525050565b6000602082019050610b946000830184610b70565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bc582610b9a565b9050919050565b610bd581610bba565b82525050565b6000602082019050610bf06000830184610bcc565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1381610b66565b8114610c1e57600080fd5b50565b600081359050610c3081610c0a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8482610c3b565b810181811067ffffffffffffffff82111715610ca357610ca2610c4c565b5b80604052505050565b6000610cb6610bf6565b9050610cc28282610c7b565b919050565b600067ffffffffffffffff821115610ce257610ce1610c4c565b5b602082029050602081019050919050565b600080fd5b6000610d0b610d0684610cc7565b610cac565b90508083825260208201905060208402830185811115610d2e57610d2d610cf3565b5b835b81811015610d575780610d438882610c21565b845260208401935050602081019050610d30565b5050509392505050565b600082601f830112610d7657610d75610c36565b5b8135610d86848260208601610cf8565b91505092915050565b60008060408385031215610da657610da5610c00565b5b6000610db485828601610c21565b925050602083013567ffffffffffffffff811115610dd557610dd4610c05565b5b610de185828601610d61565b9150509250929050565b600080fd5b60008083601f840112610e0657610e05610c36565b5b8235905067ffffffffffffffff811115610e2357610e22610deb565b5b602083019150836001820283011115610e3f57610e3e610cf3565b5b9250929050565b60008060208385031215610e5d57610e5c610c00565b5b600083013567ffffffffffffffff811115610e7b57610e7a610c05565b5b610e8785828601610df0565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ed357610ed2610e93565b5b50565b6000819050610ee482610ec2565b919050565b6000610ef482610ed6565b9050919050565b610f0481610ee9565b82525050565b6000602082019050610f1f6000830184610efb565b92915050565b600080fd5b600067ffffffffffffffff821115610f4557610f44610c4c565b5b610f4e82610c3b565b9050602081019050919050565b82818337600083830152505050565b6000610f7d610f7884610f2a565b610cac565b905082815260208101848484011115610f9957610f98610f25565b5b610fa4848285610f5b565b509392505050565b600082601f830112610fc157610fc0610c36565b5b8135610fd1848260208601610f6a565b91505092915050565b600060208284031215610ff057610fef610c00565b5b600082013567ffffffffffffffff81111561100e5761100d610c05565b5b61101a84828501610fac565b91505092915050565b60008115159050919050565b61103881611023565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107857808201518184015260208101905061105d565b60008484015250505050565b600061108f8261103e565b6110998185611049565b93506110a981856020860161105a565b6110b281610c3b565b840191505092915050565b60006040820190506110d2600083018561102f565b81810360208301526110e48184611084565b90509392505050565b60006020828403121561110357611102610c00565b5b600061111184828501610c21565b91505092915050565b600060408201905061112f6000830185610bcc565b61113c6020830184610bcc565b9392505050565b60006060820190506111586000830186610b70565b6111656020830185610b70565b6111726040830184610b70565b949350505050565b6000819050919050565b61118d8161117a565b82525050565b600067ffffffffffffffff82169050919050565b6111b081611193565b82525050565b600061ffff82169050919050565b6111cd816111b6565b82525050565b600063ffffffff82169050919050565b6111ec816111d3565b82525050565b6000819050919050565b600061121761121261120d846111b6565b6111f2565b6111d3565b9050919050565b611227816111fc565b82525050565b600060a0820190506112426000830188611184565b61124f60208301876111a7565b61125c60408301866111c4565b61126960608301856111e3565b611276608083018461121e565b9695505050505050565b60008151905061128f81610c0a565b92915050565b6000602082840312156112ab576112aa610c00565b5b60006112b984828501611280565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112fc82610b66565b915061130783610b66565b925082820390508181111561131f5761131e6112c2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061138e82610b66565b915061139983610b66565b9250826113a9576113a8611354565b5b828206905092915050565b600081905092915050565b50565b60006113cf6000836113b4565b91506113da826113bf565b600082019050919050565b60006113f0826113c2565b915081905091905056fea2646970667358221220098d2eacfe753e156a155bbaef5856121bd055e9a9191a8686f2a7c2895b542a64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1163,
        "contract": "contracts/OnePiece.sol:OnePiece",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1165,
        "contract": "contracts/OnePiece.sol:OnePiece",
        "label": "s_recentFinder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1168,
        "contract": "contracts/OnePiece.sol:OnePiece",
        "label": "s_treasureState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(TreasureState)1160"
      },
      {
        "astId": 1170,
        "contract": "contracts/OnePiece.sol:OnePiece",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1183,
        "contract": "contracts/OnePiece.sol:OnePiece",
        "label": "i_interval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(TreasureState)1160": {
        "encoding": "inplace",
        "label": "enum OnePiece.TreasureState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}